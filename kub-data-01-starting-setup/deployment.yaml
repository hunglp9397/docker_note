apiVersion: apps/v1
kind: Deployment
metadata:
  name: story-deployment
spec:
  replicas: 2 #Pod replica
  selector:
    matchLabels:
      app: story
  template: # Pod template
    metadata:
      labels: # Labels của pod
        app: story
    spec:
      containers: #Khai báo container trong pod
        - name: story
          image: 123497/kub-data-demo:3
          env: # Khai báo biến môi trường
            - name: STORY_FOLDER
              value: 'story'
          # Xác định volume nào sẽ được mount vào container(Vì ở bên dưới có tể khai báo nhiều volume).
          # Ở đây /app là khai báo WORKDIR trong file Dockerfile
          # Ở đây /story là folder lưu data, được khai báo trong file app.js. Đây : const filePath = path.join(__dirname, 'story', 'text.txt');
          volumeMounts:
            - mountPath: /app/story
              name: story-volume
      volumes:
        - name: story-volume
##          emptyDir: {}  # Cách 1. Sử dụng empty Volumes
##                        # nghĩa là bất kì khi nào pods được start, hoặc restart thì sẽ tạo ra một thư mục trống mới, container có thể ghi data vào thư mục này
##                        # Do đó, bất cứ khi nào container bị restart -> data sẽ được bảo đảm
##                        # tuy nhiên nếu pods bị remove , thì emptyDir này cũng sẽ bị xóa -> Do đó data trong volumes cũng sẽ mất
##          hostPath:                   #Cách 2. Sử dụng hostPath Volumes
##            path: /data
##            type: DirectoryOrCreate
          persistentVolumeClaim:      # Cách 3. Sử dụng PersistentVolumeCLaim
            claimName: host-pvc
